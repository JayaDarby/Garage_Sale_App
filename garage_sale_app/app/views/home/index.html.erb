<!DOCTYPE html>
<html>
  <head>
  <style type="text/css">
      html, body {  margin: 0; padding: 0; }
      #map { height: 500px; 
              width:1000px; 
      }
      body {
        background-image: url("/images/homepagecopy.jpg");
        background-repeat: no-repeat;
        background-size: 100% 684px;
      }
      #space {
        width:100%;
        height:800px;
      }
      #mainTitle{
        font-family: 'Lobster', cursive;
        text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
        margin-top:150px;
        text-align: center;
        font-size:80px;
        color:white;
      }

      #titleDetails{
        text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
        text-align: center;
        font-size:30px;
        color:white;
        font-family: 'Droid Serif', serif;

      }
    </style>
  </head>
  <body ng-controller='HomeController'>
    <script>
      window.fbAsyncInit = function() {
        FB.init({
          appId      : '603497913123464',
          xfbml      : true,
          version    : 'v2.4'
        });
      };
    
      (function(d, s, id){
         var js, fjs = d.getElementsByTagName(s)[0];
         if (d.getElementById(id)) {return;}
         js = d.createElement(s); js.id = id;
         js.src = "//connect.facebook.net/en_US/sdk.js";
         fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
    </script>
    <script>
      // This is called with the results from from FB.getLoginStatus().
      function statusChangeCallback(response) {
        console.log('statusChangeCallback');
        console.log(response);
        // The response object is returned with a status field that lets the
        // app know the current login status of the person.
        // Full docs on the response object can be found in the documentation
        // for FB.getLoginStatus().
        if (response.status === 'connected') {
          // Logged into your app and Facebook.
          testAPI();
        } else if (response.status === 'not_authorized') {
          // The person is logged into Facebook, but not your app.
          document.getElementById('status').innerHTML = 'Please log ' +
            'into this app.';
        } else {
          // The person is not logged into Facebook, so we're not sure if
          // they are logged into this app or not.
          document.getElementById('status').innerHTML = 'Please log ' +
            'into Facebook.';
        }
      }
    
      // This function is called when someone finishes with the Login
      // Button.  See the onlogin handler attached to it in the sample
      // code below.
      function checkLoginState() {
        FB.getLoginStatus(function(response) {
          statusChangeCallback(response);
        });
      }
    
      window.fbAsyncInit = function() {
      FB.init({
        appId      : '603497913123464',
        cookie     : true,  // enable cookies to allow the server to access 
                            // the session
        xfbml      : true,  // parse social plugins on this page
        version    : 'v2.2' // use version 2.2
      });
    
      // Now that we've initialized the JavaScript SDK, we call 
      // FB.getLoginStatus().  This function gets the state of the
      // person visiting this page and can return one of three states to
      // the callback you provide.  They can be:
      //
      // 1. Logged into your app ('connected')
      // 2. Logged into Facebook, but not your app ('not_authorized')
      // 3. Not logged into Facebook and can't tell if they are logged into
      //    your app or not.
      //
      // These three cases are handled in the callback function.
    
      FB.getLoginStatus(function(response) {
        statusChangeCallback(response);
      });
    
      };
    
      // Load the SDK asynchronously
      (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
      }(document, 'script', 'facebook-jssdk'));
    
      // Here we run a very simple test of the Graph API after login is
      // successful.  See statusChangeCallback() for when this call is made.
      function testAPI() {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function(response) {
          console.log('Successful login for: ' + response.name);
          document.getElementById('status').innerHTML =
            'Thanks for logging in, ' + response.name + '!';
        });
      }
    </script>

    <!--
      Below we include the Login Button social plugin. This button uses
      the JavaScript SDK to present a graphical Login button that triggers
      the FB.login() function when clicked.
    -->
    
    
    <h1 id='mainTitle'>The Whole Nine YardSales</h1>
    <p id='titleDetails'>Find garage sales in your neighborhood</p>
   
    <!-- <img src="/app/assets/images/garagesaleimages/homepage.jpg"> -->
    <div id='space'></div>
    <div
      class="fb-like"
      data-share="true"
      data-width="450"
      data-show-faces="true">
    </div>
    <fb:login-button scope="public_profile,email,user_friends" onlogin="checkLoginState();">
    </fb:login-button>
    <div id="status">
    </div>

    <div id="map"></div>
    <input type='button' value='Find Garage Sales Near Me' onclick='getLocalGarageSales()'></input>
<!--     <input type='button' value='Find Garage Sales Near Me' ng-click='getDistanceBetweenMarkers()'></input> -->
    <p>{{garageSales}}</p>
    <div ng-view>


    </div>
    <script type="text/javascript">
      var geocoder, map, marker, service;
      var garageSales = [];
      var markersArray = [];
      $.get( "/api/garage_sales.json", function( data ) {
        console.log(data);
          data.forEach(function(garageSale){
            if (garageSale.full_address !== null){
              garageSales.push(garageSale.full_address);
            }
          });
          console.log(garageSales);
      });
    

      //codeAddresses(scope.garageSales);

      function initMap() {
        //declare google maps variables and services
        geocoder = new google.maps.Geocoder();
        var bounds = new google.maps.LatLngBounds;
        service = new google.maps.DistanceMatrixService;
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 5000, lng: 5000},
          zoom: 5
        });
        var myLatlng = {lat: -25.363, lng: 131.044};

        // var allGarageSales = document.getElementById('garageSales').innerHTML;
        // codeAddresses(allGarageSales);
        //var infoWindow = new google.maps.InfoWindow({map: map});
      
        // Try HTML5 geolocation.
        ///*********------GETS YOUR LOCATION------**********
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
      
            //infoWindow.setPosition(pos);
            //infoWindow.setContent('hello');
            map.setCenter(pos);
            var youAreHereIcon = '/assets/youarehere.png';
            marker = new google.maps.Marker({
               draggable:true,
               position: pos,
               map: map,
               title: 'Your Location',
               animation: google.maps.Animation.DROP,
            });
            marker.addListener('click', toggleBounce);
            //placeMarkers(['Norway', 'Africa', 'Asia','North America','South America']);
            
          }, function() {
            console.log('error!!');
            //handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
            // Browser doesn't support Geolocation
            //handleLocationError(false, infoWindow, map.getCenter();
        }
   
            //map.data.addGeoJson(cities);
        
      }; ///end of Map init


      // function codeAddresses(addresses) {
      //    addresses.forEach(function(address){
      //      geocoder.geocode( { 'address': address}, function(results, status) {
      //         if (status == google.maps.GeocoderStatus.OK) {
      //           map.setCenter(results[0].geometry.location);
      //           var marker = new google.maps.Marker({
      //               map: map,
      //               position: results[0].geometry.location
      //           });
      //         } else {
      //           alert("Geocode was not successful for the following reason: "+status);
      //         }
      //       });
      //     };

      //    };
      /////*******-----THIS PUTS THE GARAGE SALES ON THE MAP---------*********
      // function codeAddresses(addresses) {
      //   console.log(addresses);
      //   addresses.forEach(function (address){
      //     geocoder.geocode( { 'address': address}, function(results, status) {
      //     if (status == google.maps.GeocoderStatus.OK) {
      //       map.setCenter(results[0].geometry.location);
      //       var marker = new google.maps.Marker({
      //           map: map,
      //           position: results[0].geometry.location
      //       });
      //     } else {
      //       alert("Geocode was not successful for the following reason: " + status);
      //     }
      //    });

      //   });
        
      // }
        function getLocalGarageSales(){
          var origin1 = {lat: 55.93, lng: -3.118};
          var destinationA = 'Stockholm, Sweden';
          service = new google.maps.DistanceMatrixService;
            service.getDistanceMatrix({
               origins: [origin1],
               destinations: [garageSales],
               travelMode: google.maps.TravelMode.DRIVING,
               unitSystem: google.maps.UnitSystem.METRIC,
               avoidHighways: false,
               avoidTolls: false
             }, function(response, status) {
               if (status !== google.maps.DistanceMatrixStatus.OK) {
                 alert('Error was: ' + status);
               } else {
                 var originList = response.originAddresses;
                 var destinationList = response.destinationAddresses;
                 var outputDiv = document.getElementById('output');
                 outputDiv.innerHTML = '';
                 deleteMarkers(markersArray);
            
                 var showGeocodedAddressOnMap = function(asDestination) {
                   return function(results, status) {
                     if (status === google.maps.GeocoderStatus.OK) {
                       //map.fitBounds(bounds.extend(results[0].geometry.location));
                       markersArray.push(new google.maps.Marker({
                         map: map,
                         icon:'https://chart.googleapis.com/chart?' +
          'chst=d_map_pin_letter&chld=O|FFFF00|000000',
                         position: results[0].geometry.location,
                       }));
                     } else {
                       alert('Geocode was not successful due to: ' + status);
                     }
                   };
                 };

                for (var i = 0; i < originList.length; i++) {
                    var results = response.rows[i].elements;
                   // geocoder.geocode({'address': originList[i]},
                   //     console.log('it worked!'));
                   for (var j = 0; j < results.length; j++) {
                     geocoder.geocode({'address': destinationList[j]}, function(results, status) {
                           if (status == google.maps.GeocoderStatus.OK && results[j].distance.value <       16094) {
                             showGeocodedAddressOnMap(true);
                           }
                         });
                         //showGeocodedAddressOnMap(true));
                     outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
                         ': ' + results[j].distance.text + ' in ' +
                         results[j].duration.text + '<br>';
                      }
                    }
        
        
                  }
                });
              };
         


      function placeMarkers(addresses){
        for (var x = 0; x < addresses.length; x++) {
            $.getJSON('http://maps.googleapis.com/maps/api/geocode/json?address='+addresses[x]+'    &sensor=false', null, function (data) {
                var p = data.results[0].geometry.location
                var latlng = new google.maps.LatLng(p.lat, p.lng);
                new google.maps.Marker({
                    position: latlng,
                    map: map
                });
            });
        }
      };

      function toggleBounce() {
        if (marker.getAnimation() !== null) {
          marker.setAnimation(null);
        } else {
          marker.setAnimation(google.maps.Animation.BOUNCE);
        }
      };
      
      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation .');
      };


      function deleteMarkers(markersArray) {
        for (var i = 0; i < markersArray.length; i++) {
          markersArray[i].setMap(null);
        }
        markersArray = [];
      };

      // var cities = {
      // type: 'FeatureCollection',
      // features: [{
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [-87.650, 41.850]},
      //   properties: {name: 'Chicago'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [-149.900, 61.218]},
      //   properties: {name: 'Anchorage'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [-99.127, 19.427]},
      //   properties: {name: 'Mexico City'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [-0.126, 51.500]},
      //   properties: {name: 'London'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [28.045, -26.201]},
      //   properties: {name: 'Johannesburg'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [15.322, -4.325]},
      //   properties: {name: 'Kinshasa'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [151.207, -33.867]},
      //   properties: {name: 'Sydney'}
      // }, {
      //   type: 'Feature',
      //   geometry: {type: 'Point', coordinates: [0, 0]},
      //   properties: {name: '0°N 0°E'}
      // }]
      //};
    </script>
    <script async defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCTDD39e1frZNIO5-4Rz6dvIHUPyz7FXmQ&callback=initMap">
    </script>
  </body>
</html>

